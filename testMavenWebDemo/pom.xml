<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.my.mavenweb</groupId>
  <artifactId>testMavenWebDemo</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>testMavenWebDemo Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <!-- 第一，在属性中声明一些软件包的版本 
                    原因：如果工程比较复杂庞大，则可以通过这个配置比较清晰的指导依赖包的版本，方便我们做一些其他的而处理-->
 
  <properties>
    <!-- <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> 	 -->
  	<spring.version>4.3.1.RELEASE</spring.version>
  	<junit.version>3.8.1</junit.version>
  </properties>
  
  <!-- 第二、依赖管理，依赖管理是MAven比较核心的东西，声明使用指定版本的包，重在声明依赖，可以不引入实际的依赖
  	下面要使用4.3.1版本的spring包
   -->
  <dependencyManagement>
  	<dependencies>
  		<dependency>
  			<groupId>org.springframework</groupId>
  			<artifactId>spring-framework-bom</artifactId>
  			<version>${spring.version}</version>
  			<type>pom</type>
  			<scope>import</scope>
  		</dependency>
  	</dependencies>
  </dependencyManagement>
  
  <!-- 第三，加入依赖的软件包 -->
  <dependencies>
  	<dependency>
  		<groupId>org.springframework</groupId>
  		<artifactId>spring-webmvc</artifactId>
  	</dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
    	<groupId>javax.servlet</groupId>
      	<artifactId>servlet-api</artifactId>
      	<version>2.5</version>
      	<scope>provided</scope>
    </dependency>
  </dependencies>
  
  <!-- 第四，加入插件，用Jetty容器来测试部署项目 -->
  <build>
    <finalName>testMavenWebDemo</finalName>
    <plugins>
    	<plugin>
    		<groupId>org.eclipse.jetty</groupId>
    		<artifactId>jetty-maven-plugin</artifactId>
    		<version>9.2.2.v20140723</version>
    		 <executions>
    			<!--  在打包成功后使用jetty：run来运行jetty服务-->
    			<execution>
              		 <phase>package</phase>
              		 <goals>
                		  <goal>run</goal>
              		 </goals>
            	</execution>
            </executions>
    	</plugin>
    </plugins>
  </build>
</project>
